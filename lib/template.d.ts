export declare const moduleInfoFileContent = "\nimport { http, HttpResponse } from \"msw\";\n\nexport const handlers = [\n    http.post('/api/lcdp/v1/entries/delete', () => {\n        return HttpResponse.json({\n          code: '0',\n          data: null,\n        })\n      }),\n      http.post('/api/lcdp/v1/entries/add', () => {\n        return HttpResponse.json({\n          code: '0',\n          data: null,\n        })\n      }),\n];\n\n";
export declare const indexInfoFileContent = "\n\nimport { setupWorker } from \"msw/browser\";\n\n// \u6279\u91CF\u5BFC\u5165\u67D0\u4E2A\u6587\u4EF6\u5939\u4E0B\u7684\u6240\u6709\u6587\u4EF6\nconst modules = import.meta.glob('./module/**/*.mock.{js,ts}')\n\n// \u5F02\u6B65\u83B7\u53D6\u6240\u6709 handlers \u5E76\u5408\u5E76\n async function getAllHandlers() {\n  const handlers = []\n  \n  for (const path in modules) {\n    const module = await modules[path]()\n    if (module.handlers && Array.isArray(module.handlers)) {\n      handlers.push(...module.handlers)\n    }\n  }\n  \n  return handlers\n}\n\ngetAllHandlers().then(handlers => {\n   const worker = setupWorker(...handlers);\n   worker.start({\n    onUnhandledRequest: 'bypass',\n   });\n  })\n  \n  \n\n  \n";
//# sourceMappingURL=template.d.ts.map